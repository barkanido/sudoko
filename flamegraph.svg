<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>cargo::core::summary::build_feature_map (1 samples, 0.76%)</title><rect x="0.0000%" y="661" width="0.7576%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="671.50"></text></g><g><title>[[heap]] (2 samples, 1.52%)</title><rect x="0.0000%" y="677" width="1.5152%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="687.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.76%)</title><rect x="0.7576%" y="661" width="0.7576%" height="15" fill="rgb(221,193,54)"/><text x="1.0076%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="661" width="0.7576%" height="15" fill="rgb(248,212,6)"/><text x="1.7652%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="645" width="0.7576%" height="15" fill="rgb(208,68,35)"/><text x="1.7652%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="629" width="0.7576%" height="15" fill="rgb(232,128,0)"/><text x="1.7652%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="613" width="0.7576%" height="15" fill="rgb(207,160,47)"/><text x="1.7652%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="597" width="0.7576%" height="15" fill="rgb(228,23,34)"/><text x="1.7652%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="581" width="0.7576%" height="15" fill="rgb(218,30,26)"/><text x="1.7652%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="565" width="0.7576%" height="15" fill="rgb(220,122,19)"/><text x="1.7652%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="549" width="0.7576%" height="15" fill="rgb(250,228,42)"/><text x="1.7652%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="533" width="0.7576%" height="15" fill="rgb(240,193,28)"/><text x="1.7652%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="517" width="0.7576%" height="15" fill="rgb(216,20,37)"/><text x="1.7652%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="1.5152%" y="501" width="0.7576%" height="15" fill="rgb(206,188,39)"/><text x="1.7652%" y="511.50"></text></g><g><title>cargo::cli::main (1 samples, 0.76%)</title><rect x="2.2727%" y="661" width="0.7576%" height="15" fill="rgb(217,207,13)"/><text x="2.5227%" y="671.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.76%)</title><rect x="2.2727%" y="645" width="0.7576%" height="15" fill="rgb(231,73,38)"/><text x="2.5227%" y="655.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.76%)</title><rect x="2.2727%" y="629" width="0.7576%" height="15" fill="rgb(225,20,46)"/><text x="2.5227%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::ops::resolve::WorkspaceResolve&gt; (1 samples, 0.76%)</title><rect x="2.2727%" y="613" width="0.7576%" height="15" fill="rgb(210,31,41)"/><text x="2.5227%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="2.2727%" y="597" width="0.7576%" height="15" fill="rgb(221,200,47)"/><text x="2.5227%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::sources::registry::RegistrySource&gt; (1 samples, 0.76%)</title><rect x="2.2727%" y="581" width="0.7576%" height="15" fill="rgb(226,26,5)"/><text x="2.5227%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="2.2727%" y="565" width="0.7576%" height="15" fill="rgb(249,33,26)"/><text x="2.5227%" y="575.50"></text></g><g><title>_int_free (1 samples, 0.76%)</title><rect x="2.2727%" y="549" width="0.7576%" height="15" fill="rgb(235,183,28)"/><text x="2.5227%" y="559.50"></text></g><g><title>malloc_consolidate (1 samples, 0.76%)</title><rect x="2.2727%" y="533" width="0.7576%" height="15" fill="rgb(221,5,38)"/><text x="2.5227%" y="543.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 0.76%)</title><rect x="3.0303%" y="661" width="0.7576%" height="15" fill="rgb(247,18,42)"/><text x="3.2803%" y="671.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.76%)</title><rect x="3.0303%" y="645" width="0.7576%" height="15" fill="rgb(241,131,45)"/><text x="3.2803%" y="655.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.76%)</title><rect x="3.0303%" y="629" width="0.7576%" height="15" fill="rgb(249,31,29)"/><text x="3.2803%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.76%)</title><rect x="3.0303%" y="613" width="0.7576%" height="15" fill="rgb(225,111,53)"/><text x="3.2803%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.76%)</title><rect x="3.0303%" y="597" width="0.7576%" height="15" fill="rgb(238,160,17)"/><text x="3.2803%" y="607.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 0.76%)</title><rect x="3.0303%" y="581" width="0.7576%" height="15" fill="rgb(214,148,48)"/><text x="3.2803%" y="591.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.76%)</title><rect x="3.0303%" y="565" width="0.7576%" height="15" fill="rgb(232,36,49)"/><text x="3.2803%" y="575.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.76%)</title><rect x="3.0303%" y="549" width="0.7576%" height="15" fill="rgb(209,103,24)"/><text x="3.2803%" y="559.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 0.76%)</title><rect x="3.0303%" y="533" width="0.7576%" height="15" fill="rgb(229,88,8)"/><text x="3.2803%" y="543.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 0.76%)</title><rect x="3.0303%" y="517" width="0.7576%" height="15" fill="rgb(213,181,19)"/><text x="3.2803%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.76%)</title><rect x="3.0303%" y="501" width="0.7576%" height="15" fill="rgb(254,191,54)"/><text x="3.2803%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.76%)</title><rect x="3.0303%" y="485" width="0.7576%" height="15" fill="rgb(241,83,37)"/><text x="3.2803%" y="495.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.76%)</title><rect x="3.0303%" y="469" width="0.7576%" height="15" fill="rgb(233,36,39)"/><text x="3.2803%" y="479.50"></text></g><g><title>_int_realloc (1 samples, 0.76%)</title><rect x="3.0303%" y="453" width="0.7576%" height="15" fill="rgb(226,3,54)"/><text x="3.2803%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.76%)</title><rect x="3.0303%" y="437" width="0.7576%" height="15" fill="rgb(245,192,40)"/><text x="3.2803%" y="447.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.76%)</title><rect x="3.7879%" y="661" width="0.7576%" height="15" fill="rgb(238,167,29)"/><text x="4.0379%" y="671.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (1 samples, 0.76%)</title><rect x="3.7879%" y="645" width="0.7576%" height="15" fill="rgb(232,182,51)"/><text x="4.0379%" y="655.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible (1 samples, 0.76%)</title><rect x="3.7879%" y="629" width="0.7576%" height="15" fill="rgb(231,60,39)"/><text x="4.0379%" y="639.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.76%)</title><rect x="3.7879%" y="613" width="0.7576%" height="15" fill="rgb(208,69,12)"/><text x="4.0379%" y="623.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.76%)</title><rect x="3.7879%" y="597" width="0.7576%" height="15" fill="rgb(235,93,37)"/><text x="4.0379%" y="607.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.76%)</title><rect x="3.7879%" y="581" width="0.7576%" height="15" fill="rgb(213,116,39)"/><text x="4.0379%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.76%)</title><rect x="3.7879%" y="565" width="0.7576%" height="15" fill="rgb(222,207,29)"/><text x="4.0379%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.76%)</title><rect x="3.7879%" y="549" width="0.7576%" height="15" fill="rgb(206,96,30)"/><text x="4.0379%" y="559.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (2 samples, 1.52%)</title><rect x="4.5455%" y="661" width="1.5152%" height="15" fill="rgb(218,138,4)"/><text x="4.7955%" y="671.50"></text></g><g><title>cargo::util::toml::read_manifest (2 samples, 1.52%)</title><rect x="4.5455%" y="645" width="1.5152%" height="15" fill="rgb(250,191,14)"/><text x="4.7955%" y="655.50"></text></g><g><title>cargo::util::toml::parse (2 samples, 1.52%)</title><rect x="4.5455%" y="629" width="1.5152%" height="15" fill="rgb(239,60,40)"/><text x="4.7955%" y="639.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (2 samples, 1.52%)</title><rect x="4.5455%" y="613" width="1.5152%" height="15" fill="rgb(206,27,48)"/><text x="4.7955%" y="623.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (2 samples, 1.52%)</title><rect x="4.5455%" y="597" width="1.5152%" height="15" fill="rgb(225,35,8)"/><text x="4.7955%" y="607.50"></text></g><g><title>toml::de::Deserializer::tables (2 samples, 1.52%)</title><rect x="4.5455%" y="581" width="1.5152%" height="15" fill="rgb(250,213,24)"/><text x="4.7955%" y="591.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 0.76%)</title><rect x="5.3030%" y="565" width="0.7576%" height="15" fill="rgb(247,123,22)"/><text x="5.5530%" y="575.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.76%)</title><rect x="5.3030%" y="549" width="0.7576%" height="15" fill="rgb(231,138,38)"/><text x="5.5530%" y="559.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.76%)</title><rect x="6.0606%" y="661" width="0.7576%" height="15" fill="rgb(231,145,46)"/><text x="6.3106%" y="671.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.0606%" y="645" width="0.7576%" height="15" fill="rgb(251,118,11)"/><text x="6.3106%" y="655.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.0606%" y="629" width="0.7576%" height="15" fill="rgb(217,147,25)"/><text x="6.3106%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.76%)</title><rect x="6.0606%" y="613" width="0.7576%" height="15" fill="rgb(247,81,37)"/><text x="6.3106%" y="623.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.0606%" y="597" width="0.7576%" height="15" fill="rgb(209,12,38)"/><text x="6.3106%" y="607.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceId as serde::de::Deserialize&gt;::deserialize (1 samples, 0.76%)</title><rect x="6.0606%" y="581" width="0.7576%" height="15" fill="rgb(227,1,9)"/><text x="6.3106%" y="591.50"></text></g><g><title>cargo::core::source::source_id::SourceId::from_url (1 samples, 0.76%)</title><rect x="6.0606%" y="565" width="0.7576%" height="15" fill="rgb(248,47,43)"/><text x="6.3106%" y="575.50"></text></g><g><title>&lt;&amp;str as cargo::util::into_url::IntoUrl&gt;::into_url (1 samples, 0.76%)</title><rect x="6.0606%" y="549" width="0.7576%" height="15" fill="rgb(221,10,30)"/><text x="6.3106%" y="559.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.76%)</title><rect x="6.0606%" y="533" width="0.7576%" height="15" fill="rgb(210,229,1)"/><text x="6.3106%" y="543.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 0.76%)</title><rect x="6.0606%" y="517" width="0.7576%" height="15" fill="rgb(222,148,37)"/><text x="6.3106%" y="527.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.8182%" y="645" width="0.7576%" height="15" fill="rgb(234,67,33)"/><text x="7.0682%" y="655.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.76%)</title><rect x="6.8182%" y="629" width="0.7576%" height="15" fill="rgb(247,98,35)"/><text x="7.0682%" y="639.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.76%)</title><rect x="6.8182%" y="613" width="0.7576%" height="15" fill="rgb(247,138,52)"/><text x="7.0682%" y="623.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.76%)</title><rect x="6.8182%" y="597" width="0.7576%" height="15" fill="rgb(213,79,30)"/><text x="7.0682%" y="607.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.8182%" y="581" width="0.7576%" height="15" fill="rgb(246,177,23)"/><text x="7.0682%" y="591.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.76%)</title><rect x="6.8182%" y="565" width="0.7576%" height="15" fill="rgb(230,62,27)"/><text x="7.0682%" y="575.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.76%)</title><rect x="6.8182%" y="549" width="0.7576%" height="15" fill="rgb(216,154,8)"/><text x="7.0682%" y="559.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.76%)</title><rect x="6.8182%" y="533" width="0.7576%" height="15" fill="rgb(244,35,45)"/><text x="7.0682%" y="543.50"></text></g><g><title>&lt;serde_ignored::CaptureKey&lt;X&gt; as serde::de::Visitor&gt;::visit_string (1 samples, 0.76%)</title><rect x="6.8182%" y="517" width="0.7576%" height="15" fill="rgb(251,115,12)"/><text x="7.0682%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.76%)</title><rect x="6.8182%" y="501" width="0.7576%" height="15" fill="rgb(240,54,50)"/><text x="7.0682%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.76%)</title><rect x="6.8182%" y="485" width="0.7576%" height="15" fill="rgb(233,84,52)"/><text x="7.0682%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.76%)</title><rect x="6.8182%" y="469" width="0.7576%" height="15" fill="rgb(207,117,47)"/><text x="7.0682%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.76%)</title><rect x="6.8182%" y="453" width="0.7576%" height="15" fill="rgb(249,43,39)"/><text x="7.0682%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.76%)</title><rect x="6.8182%" y="437" width="0.7576%" height="15" fill="rgb(209,38,44)"/><text x="7.0682%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.76%)</title><rect x="6.8182%" y="421" width="0.7576%" height="15" fill="rgb(236,212,23)"/><text x="7.0682%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.76%)</title><rect x="6.8182%" y="405" width="0.7576%" height="15" fill="rgb(242,79,21)"/><text x="7.0682%" y="415.50"></text></g><g><title>__memcpy_sse2_unaligned (1 samples, 0.76%)</title><rect x="6.8182%" y="389" width="0.7576%" height="15" fill="rgb(211,96,35)"/><text x="7.0682%" y="399.50"></text></g><g><title>[unknown] (9 samples, 6.82%)</title><rect x="1.5152%" y="677" width="6.8182%" height="15" fill="rgb(253,215,40)"/><text x="1.7652%" y="687.50">[unknown]</text></g><g><title>cargo::util::toml::read_manifest (2 samples, 1.52%)</title><rect x="6.8182%" y="661" width="1.5152%" height="15" fill="rgb(211,81,21)"/><text x="7.0682%" y="671.50"></text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (1 samples, 0.76%)</title><rect x="7.5758%" y="645" width="0.7576%" height="15" fill="rgb(208,190,38)"/><text x="7.8258%" y="655.50"></text></g><g><title>cargo::util::toml::targets::targets (1 samples, 0.76%)</title><rect x="7.5758%" y="629" width="0.7576%" height="15" fill="rgb(235,213,38)"/><text x="7.8258%" y="639.50"></text></g><g><title>cargo::util::toml::targets::infer_from_directory (1 samples, 0.76%)</title><rect x="7.5758%" y="613" width="0.7576%" height="15" fill="rgb(237,122,38)"/><text x="7.8258%" y="623.50"></text></g><g><title>std::sys::unix::fs::readdir (1 samples, 0.76%)</title><rect x="7.5758%" y="597" width="0.7576%" height="15" fill="rgb(244,218,35)"/><text x="7.8258%" y="607.50"></text></g><g><title>__opendir (1 samples, 0.76%)</title><rect x="7.5758%" y="581" width="0.7576%" height="15" fill="rgb(240,68,47)"/><text x="7.8258%" y="591.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.76%)</title><rect x="7.5758%" y="565" width="0.7576%" height="15" fill="rgb(210,16,53)"/><text x="7.8258%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="549" width="0.7576%" height="15" fill="rgb(235,124,12)"/><text x="7.8258%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="533" width="0.7576%" height="15" fill="rgb(224,169,11)"/><text x="7.8258%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="517" width="0.7576%" height="15" fill="rgb(250,166,2)"/><text x="7.8258%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="501" width="0.7576%" height="15" fill="rgb(242,216,29)"/><text x="7.8258%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="485" width="0.7576%" height="15" fill="rgb(230,116,27)"/><text x="7.8258%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="469" width="0.7576%" height="15" fill="rgb(228,99,48)"/><text x="7.8258%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="453" width="0.7576%" height="15" fill="rgb(253,11,6)"/><text x="7.8258%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="437" width="0.7576%" height="15" fill="rgb(247,143,39)"/><text x="7.8258%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="7.5758%" y="421" width="0.7576%" height="15" fill="rgb(236,97,10)"/><text x="7.8258%" y="431.50"></text></g><g><title>__libc_start_main (1 samples, 0.76%)</title><rect x="8.3333%" y="661" width="0.7576%" height="15" fill="rgb(233,208,19)"/><text x="8.5833%" y="671.50"></text></g><g><title>main (1 samples, 0.76%)</title><rect x="8.3333%" y="645" width="0.7576%" height="15" fill="rgb(216,164,2)"/><text x="8.5833%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.76%)</title><rect x="8.3333%" y="629" width="0.7576%" height="15" fill="rgb(220,129,5)"/><text x="8.5833%" y="639.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.76%)</title><rect x="8.3333%" y="613" width="0.7576%" height="15" fill="rgb(242,17,10)"/><text x="8.5833%" y="623.50"></text></g><g><title>std::panicking::try (1 samples, 0.76%)</title><rect x="8.3333%" y="597" width="0.7576%" height="15" fill="rgb(242,107,0)"/><text x="8.5833%" y="607.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.76%)</title><rect x="8.3333%" y="581" width="0.7576%" height="15" fill="rgb(251,28,31)"/><text x="8.5833%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.76%)</title><rect x="8.3333%" y="565" width="0.7576%" height="15" fill="rgb(233,223,10)"/><text x="8.5833%" y="575.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.76%)</title><rect x="8.3333%" y="549" width="0.7576%" height="15" fill="rgb(215,21,27)"/><text x="8.5833%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.76%)</title><rect x="8.3333%" y="533" width="0.7576%" height="15" fill="rgb(232,23,21)"/><text x="8.5833%" y="543.50"></text></g><g><title>cargo::main (1 samples, 0.76%)</title><rect x="8.3333%" y="517" width="0.7576%" height="15" fill="rgb(244,5,23)"/><text x="8.5833%" y="527.50"></text></g><g><title>cargo::cli::main (1 samples, 0.76%)</title><rect x="8.3333%" y="501" width="0.7576%" height="15" fill="rgb(226,81,46)"/><text x="8.5833%" y="511.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.76%)</title><rect x="8.3333%" y="485" width="0.7576%" height="15" fill="rgb(247,70,30)"/><text x="8.5833%" y="495.50"></text></g><g><title>cargo::core::shell::Shell::print_json (1 samples, 0.76%)</title><rect x="8.3333%" y="469" width="0.7576%" height="15" fill="rgb(212,68,19)"/><text x="8.5833%" y="479.50"></text></g><g><title>cargo::ops::cargo_output_metadata::_::&lt;impl serde::ser::Serialize for cargo::ops::cargo_output_metadata::ExportInfo&gt;::serialize (1 samples, 0.76%)</title><rect x="8.3333%" y="453" width="0.7576%" height="15" fill="rgb(240,187,13)"/><text x="8.5833%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.76%)</title><rect x="8.3333%" y="437" width="0.7576%" height="15" fill="rgb(223,113,26)"/><text x="8.5833%" y="447.50"></text></g><g><title>cargo::core::package::_::&lt;impl serde::ser::Serialize for cargo::core::package::SerializedPackage&gt;::serialize (1 samples, 0.76%)</title><rect x="8.3333%" y="421" width="0.7576%" height="15" fill="rgb(206,192,2)"/><text x="8.5833%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.76%)</title><rect x="8.3333%" y="405" width="0.7576%" height="15" fill="rgb(241,108,4)"/><text x="8.5833%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.76%)</title><rect x="8.3333%" y="389" width="0.7576%" height="15" fill="rgb(247,173,49)"/><text x="8.5833%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.76%)</title><rect x="8.3333%" y="373" width="0.7576%" height="15" fill="rgb(224,114,35)"/><text x="8.5833%" y="383.50"></text></g><g><title>cargo (13 samples, 9.85%)</title><rect x="0.0000%" y="693" width="9.8485%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="703.50">cargo</text></g><g><title>_start (2 samples, 1.52%)</title><rect x="8.3333%" y="677" width="1.5152%" height="15" fill="rgb(245,172,44)"/><text x="8.5833%" y="687.50"></text></g><g><title>_dl_start (1 samples, 0.76%)</title><rect x="9.0909%" y="661" width="0.7576%" height="15" fill="rgb(236,23,11)"/><text x="9.3409%" y="671.50"></text></g><g><title>_dl_start_final (1 samples, 0.76%)</title><rect x="9.0909%" y="645" width="0.7576%" height="15" fill="rgb(205,117,38)"/><text x="9.3409%" y="655.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.76%)</title><rect x="9.0909%" y="629" width="0.7576%" height="15" fill="rgb(237,72,25)"/><text x="9.3409%" y="639.50"></text></g><g><title>dl_main (1 samples, 0.76%)</title><rect x="9.0909%" y="613" width="0.7576%" height="15" fill="rgb(244,70,9)"/><text x="9.3409%" y="623.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.76%)</title><rect x="9.0909%" y="597" width="0.7576%" height="15" fill="rgb(217,125,39)"/><text x="9.3409%" y="607.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.76%)</title><rect x="9.0909%" y="581" width="0.7576%" height="15" fill="rgb(235,36,10)"/><text x="9.3409%" y="591.50"></text></g><g><title>elf_machine_rela (1 samples, 0.76%)</title><rect x="9.0909%" y="565" width="0.7576%" height="15" fill="rgb(251,123,47)"/><text x="9.3409%" y="575.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.76%)</title><rect x="9.0909%" y="549" width="0.7576%" height="15" fill="rgb(221,13,13)"/><text x="9.3409%" y="559.50"></text></g><g><title>do_lookup_x (1 samples, 0.76%)</title><rect x="9.0909%" y="533" width="0.7576%" height="15" fill="rgb(238,131,9)"/><text x="9.3409%" y="543.50"></text></g><g><title>[gnuplot-qt] (1 samples, 0.76%)</title><rect x="9.8485%" y="677" width="0.7576%" height="15" fill="rgb(211,50,8)"/><text x="10.0985%" y="687.50"></text></g><g><title>__libc_start_main (1 samples, 0.76%)</title><rect x="9.8485%" y="661" width="0.7576%" height="15" fill="rgb(245,182,24)"/><text x="10.0985%" y="671.50"></text></g><g><title>[gnuplot-qt] (1 samples, 0.76%)</title><rect x="9.8485%" y="645" width="0.7576%" height="15" fill="rgb(242,14,37)"/><text x="10.0985%" y="655.50"></text></g><g><title>___printf_chk (1 samples, 0.76%)</title><rect x="9.8485%" y="629" width="0.7576%" height="15" fill="rgb(246,228,12)"/><text x="10.0985%" y="639.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.76%)</title><rect x="9.8485%" y="613" width="0.7576%" height="15" fill="rgb(213,55,15)"/><text x="10.0985%" y="623.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.76%)</title><rect x="9.8485%" y="597" width="0.7576%" height="15" fill="rgb(209,9,3)"/><text x="10.0985%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="581" width="0.7576%" height="15" fill="rgb(230,59,30)"/><text x="10.0985%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="565" width="0.7576%" height="15" fill="rgb(209,121,21)"/><text x="10.0985%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="549" width="0.7576%" height="15" fill="rgb(220,109,13)"/><text x="10.0985%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="533" width="0.7576%" height="15" fill="rgb(232,18,1)"/><text x="10.0985%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="517" width="0.7576%" height="15" fill="rgb(215,41,42)"/><text x="10.0985%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="501" width="0.7576%" height="15" fill="rgb(224,123,36)"/><text x="10.0985%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="485" width="0.7576%" height="15" fill="rgb(240,125,3)"/><text x="10.0985%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="677" width="0.7576%" height="15" fill="rgb(205,98,50)"/><text x="10.8561%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="661" width="0.7576%" height="15" fill="rgb(205,185,37)"/><text x="10.8561%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="645" width="0.7576%" height="15" fill="rgb(238,207,15)"/><text x="10.8561%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="629" width="0.7576%" height="15" fill="rgb(213,199,42)"/><text x="10.8561%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="613" width="0.7576%" height="15" fill="rgb(235,201,11)"/><text x="10.8561%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="597" width="0.7576%" height="15" fill="rgb(207,46,11)"/><text x="10.8561%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="581" width="0.7576%" height="15" fill="rgb(241,35,35)"/><text x="10.8561%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="565" width="0.7576%" height="15" fill="rgb(243,32,47)"/><text x="10.8561%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="549" width="0.7576%" height="15" fill="rgb(247,202,23)"/><text x="10.8561%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="533" width="0.7576%" height="15" fill="rgb(219,102,11)"/><text x="10.8561%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="10.6061%" y="517" width="0.7576%" height="15" fill="rgb(243,110,44)"/><text x="10.8561%" y="527.50"></text></g><g><title>_dl_start_user (1 samples, 0.76%)</title><rect x="11.3636%" y="677" width="0.7576%" height="15" fill="rgb(222,74,54)"/><text x="11.6136%" y="687.50"></text></g><g><title>_dl_init (1 samples, 0.76%)</title><rect x="11.3636%" y="661" width="0.7576%" height="15" fill="rgb(216,99,12)"/><text x="11.6136%" y="671.50"></text></g><g><title>call_init (1 samples, 0.76%)</title><rect x="11.3636%" y="645" width="0.7576%" height="15" fill="rgb(226,22,26)"/><text x="11.6136%" y="655.50"></text></g><g><title>call_init (1 samples, 0.76%)</title><rect x="11.3636%" y="629" width="0.7576%" height="15" fill="rgb(217,163,10)"/><text x="11.6136%" y="639.50"></text></g><g><title>[libselinux.so.1] (1 samples, 0.76%)</title><rect x="11.3636%" y="613" width="0.7576%" height="15" fill="rgb(213,25,53)"/><text x="11.6136%" y="623.50"></text></g><g><title>selinuxfs_exists (1 samples, 0.76%)</title><rect x="11.3636%" y="597" width="0.7576%" height="15" fill="rgb(252,105,26)"/><text x="11.6136%" y="607.50"></text></g><g><title>_IO_getdelim (1 samples, 0.76%)</title><rect x="11.3636%" y="581" width="0.7576%" height="15" fill="rgb(220,39,43)"/><text x="11.6136%" y="591.50"></text></g><g><title>_IO_new_file_underflow (1 samples, 0.76%)</title><rect x="11.3636%" y="565" width="0.7576%" height="15" fill="rgb(229,68,48)"/><text x="11.6136%" y="575.50"></text></g><g><title>__GI___libc_read (1 samples, 0.76%)</title><rect x="11.3636%" y="549" width="0.7576%" height="15" fill="rgb(252,8,32)"/><text x="11.6136%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="533" width="0.7576%" height="15" fill="rgb(223,20,43)"/><text x="11.6136%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="517" width="0.7576%" height="15" fill="rgb(229,81,49)"/><text x="11.6136%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="501" width="0.7576%" height="15" fill="rgb(236,28,36)"/><text x="11.6136%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="485" width="0.7576%" height="15" fill="rgb(249,185,26)"/><text x="11.6136%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="469" width="0.7576%" height="15" fill="rgb(249,174,33)"/><text x="11.6136%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="453" width="0.7576%" height="15" fill="rgb(233,201,37)"/><text x="11.6136%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="437" width="0.7576%" height="15" fill="rgb(221,78,26)"/><text x="11.6136%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="421" width="0.7576%" height="15" fill="rgb(250,127,30)"/><text x="11.6136%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="405" width="0.7576%" height="15" fill="rgb(230,49,44)"/><text x="11.6136%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="389" width="0.7576%" height="15" fill="rgb(229,67,23)"/><text x="11.6136%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="373" width="0.7576%" height="15" fill="rgb(249,83,47)"/><text x="11.6136%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="357" width="0.7576%" height="15" fill="rgb(215,43,3)"/><text x="11.6136%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="341" width="0.7576%" height="15" fill="rgb(238,154,13)"/><text x="11.6136%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="11.3636%" y="325" width="0.7576%" height="15" fill="rgb(219,56,2)"/><text x="11.6136%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="613" width="0.7576%" height="15" fill="rgb(233,0,4)"/><text x="12.3712%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="597" width="0.7576%" height="15" fill="rgb(235,30,7)"/><text x="12.3712%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="581" width="0.7576%" height="15" fill="rgb(250,79,13)"/><text x="12.3712%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="565" width="0.7576%" height="15" fill="rgb(211,146,34)"/><text x="12.3712%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="549" width="0.7576%" height="15" fill="rgb(228,22,38)"/><text x="12.3712%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="533" width="0.7576%" height="15" fill="rgb(235,168,5)"/><text x="12.3712%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="517" width="0.7576%" height="15" fill="rgb(221,155,16)"/><text x="12.3712%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="501" width="0.7576%" height="15" fill="rgb(215,215,53)"/><text x="12.3712%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="485" width="0.7576%" height="15" fill="rgb(223,4,10)"/><text x="12.3712%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="469" width="0.7576%" height="15" fill="rgb(234,103,6)"/><text x="12.3712%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="12.1212%" y="453" width="0.7576%" height="15" fill="rgb(227,97,0)"/><text x="12.3712%" y="463.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.76%)</title><rect x="12.8788%" y="597" width="0.7576%" height="15" fill="rgb(234,150,53)"/><text x="13.1288%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.76%)</title><rect x="12.8788%" y="581" width="0.7576%" height="15" fill="rgb(228,201,54)"/><text x="13.1288%" y="591.50"></text></g><g><title>openaux (1 samples, 0.76%)</title><rect x="12.8788%" y="565" width="0.7576%" height="15" fill="rgb(222,22,37)"/><text x="13.1288%" y="575.50"></text></g><g><title>_dl_map_object (1 samples, 0.76%)</title><rect x="12.8788%" y="549" width="0.7576%" height="15" fill="rgb(237,53,32)"/><text x="13.1288%" y="559.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.76%)</title><rect x="12.8788%" y="533" width="0.7576%" height="15" fill="rgb(233,25,53)"/><text x="13.1288%" y="543.50"></text></g><g><title>elf_machine_rela (4 samples, 3.03%)</title><rect x="13.6364%" y="565" width="3.0303%" height="15" fill="rgb(210,40,34)"/><text x="13.8864%" y="575.50">elf..</text></g><g><title>_dl_lookup_symbol_x (4 samples, 3.03%)</title><rect x="13.6364%" y="549" width="3.0303%" height="15" fill="rgb(241,220,44)"/><text x="13.8864%" y="559.50">_dl..</text></g><g><title>do_lookup_x (4 samples, 3.03%)</title><rect x="13.6364%" y="533" width="3.0303%" height="15" fill="rgb(235,28,35)"/><text x="13.8864%" y="543.50">do_..</text></g><g><title>gnuplot (10 samples, 7.58%)</title><rect x="9.8485%" y="693" width="7.5758%" height="15" fill="rgb(210,56,17)"/><text x="10.0985%" y="703.50">gnuplot</text></g><g><title>_start (7 samples, 5.30%)</title><rect x="12.1212%" y="677" width="5.3030%" height="15" fill="rgb(224,130,29)"/><text x="12.3712%" y="687.50">_start</text></g><g><title>_dl_start (7 samples, 5.30%)</title><rect x="12.1212%" y="661" width="5.3030%" height="15" fill="rgb(235,212,8)"/><text x="12.3712%" y="671.50">_dl_st..</text></g><g><title>_dl_start_final (7 samples, 5.30%)</title><rect x="12.1212%" y="645" width="5.3030%" height="15" fill="rgb(223,33,50)"/><text x="12.3712%" y="655.50">_dl_st..</text></g><g><title>_dl_sysdep_start (7 samples, 5.30%)</title><rect x="12.1212%" y="629" width="5.3030%" height="15" fill="rgb(219,149,13)"/><text x="12.3712%" y="639.50">_dl_sy..</text></g><g><title>dl_main (6 samples, 4.55%)</title><rect x="12.8788%" y="613" width="4.5455%" height="15" fill="rgb(250,156,29)"/><text x="13.1288%" y="623.50">dl_ma..</text></g><g><title>_dl_relocate_object (5 samples, 3.79%)</title><rect x="13.6364%" y="597" width="3.7879%" height="15" fill="rgb(216,193,19)"/><text x="13.8864%" y="607.50">_dl_..</text></g><g><title>elf_dynamic_do_Rela (5 samples, 3.79%)</title><rect x="13.6364%" y="581" width="3.7879%" height="15" fill="rgb(216,135,14)"/><text x="13.8864%" y="591.50">elf_..</text></g><g><title>elf_machine_rela_relative (1 samples, 0.76%)</title><rect x="16.6667%" y="565" width="0.7576%" height="15" fill="rgb(241,47,5)"/><text x="16.9167%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="549" width="0.7576%" height="15" fill="rgb(233,42,35)"/><text x="16.9167%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="533" width="0.7576%" height="15" fill="rgb(231,13,6)"/><text x="16.9167%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="517" width="0.7576%" height="15" fill="rgb(207,181,40)"/><text x="16.9167%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="501" width="0.7576%" height="15" fill="rgb(254,173,49)"/><text x="16.9167%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="485" width="0.7576%" height="15" fill="rgb(221,1,38)"/><text x="16.9167%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="469" width="0.7576%" height="15" fill="rgb(206,124,46)"/><text x="16.9167%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="453" width="0.7576%" height="15" fill="rgb(249,21,11)"/><text x="16.9167%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="437" width="0.7576%" height="15" fill="rgb(222,201,40)"/><text x="16.9167%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="421" width="0.7576%" height="15" fill="rgb(235,61,29)"/><text x="16.9167%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="405" width="0.7576%" height="15" fill="rgb(219,207,3)"/><text x="16.9167%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="16.6667%" y="389" width="0.7576%" height="15" fill="rgb(222,56,46)"/><text x="16.9167%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.76%)</title><rect x="17.4242%" y="661" width="0.7576%" height="15" fill="rgb(239,76,54)"/><text x="17.6742%" y="671.50"></text></g><g><title>[[heap]] (2 samples, 1.52%)</title><rect x="17.4242%" y="677" width="1.5152%" height="15" fill="rgb(231,124,27)"/><text x="17.6742%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.76%)</title><rect x="18.1818%" y="661" width="0.7576%" height="15" fill="rgb(249,195,6)"/><text x="18.4318%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="18.9394%" y="661" width="0.7576%" height="15" fill="rgb(237,174,47)"/><text x="19.1894%" y="671.50"></text></g><g><title>[[stack]] (3 samples, 2.27%)</title><rect x="18.9394%" y="677" width="2.2727%" height="15" fill="rgb(206,201,31)"/><text x="19.1894%" y="687.50">[..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (2 samples, 1.52%)</title><rect x="19.6970%" y="661" width="1.5152%" height="15" fill="rgb(231,57,52)"/><text x="19.9470%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="661" width="0.7576%" height="15" fill="rgb(248,177,22)"/><text x="21.4621%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="645" width="0.7576%" height="15" fill="rgb(215,211,37)"/><text x="21.4621%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="629" width="0.7576%" height="15" fill="rgb(241,128,51)"/><text x="21.4621%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="613" width="0.7576%" height="15" fill="rgb(227,165,31)"/><text x="21.4621%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="597" width="0.7576%" height="15" fill="rgb(228,167,24)"/><text x="21.4621%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="581" width="0.7576%" height="15" fill="rgb(228,143,12)"/><text x="21.4621%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="565" width="0.7576%" height="15" fill="rgb(249,149,8)"/><text x="21.4621%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="549" width="0.7576%" height="15" fill="rgb(243,35,44)"/><text x="21.4621%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="21.2121%" y="533" width="0.7576%" height="15" fill="rgb(246,89,9)"/><text x="21.4621%" y="543.50"></text></g><g><title>__GI___libc_sigaction (1 samples, 0.76%)</title><rect x="21.9697%" y="645" width="0.7576%" height="15" fill="rgb(233,213,13)"/><text x="22.2197%" y="655.50"></text></g><g><title>__spawni_child (2 samples, 1.52%)</title><rect x="21.9697%" y="661" width="1.5152%" height="15" fill="rgb(233,141,41)"/><text x="22.2197%" y="671.50"></text></g><g><title>__execvpex (1 samples, 0.76%)</title><rect x="22.7273%" y="645" width="0.7576%" height="15" fill="rgb(239,167,4)"/><text x="22.9773%" y="655.50"></text></g><g><title>__execvpe_common (1 samples, 0.76%)</title><rect x="22.7273%" y="629" width="0.7576%" height="15" fill="rgb(209,217,16)"/><text x="22.9773%" y="639.50"></text></g><g><title>__GI_execve (1 samples, 0.76%)</title><rect x="22.7273%" y="613" width="0.7576%" height="15" fill="rgb(219,88,35)"/><text x="22.9773%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="22.7273%" y="597" width="0.7576%" height="15" fill="rgb(220,193,23)"/><text x="22.9773%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="22.7273%" y="581" width="0.7576%" height="15" fill="rgb(230,90,52)"/><text x="22.9773%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="22.7273%" y="565" width="0.7576%" height="15" fill="rgb(252,106,19)"/><text x="22.9773%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="22.7273%" y="549" width="0.7576%" height="15" fill="rgb(206,74,20)"/><text x="22.9773%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="22.7273%" y="533" width="0.7576%" height="15" fill="rgb(230,138,44)"/><text x="22.9773%" y="543.50"></text></g><g><title>_int_malloc (1 samples, 0.76%)</title><rect x="23.4848%" y="661" width="0.7576%" height="15" fill="rgb(235,182,43)"/><text x="23.7348%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="24.2424%" y="389" width="0.7576%" height="15" fill="rgb(242,16,51)"/><text x="24.4924%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.76%)</title><rect x="24.2424%" y="373" width="0.7576%" height="15" fill="rgb(248,9,4)"/><text x="24.4924%" y="383.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (2 samples, 1.52%)</title><rect x="24.2424%" y="661" width="1.5152%" height="15" fill="rgb(210,31,22)"/><text x="24.4924%" y="671.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (2 samples, 1.52%)</title><rect x="24.2424%" y="645" width="1.5152%" height="15" fill="rgb(239,54,39)"/><text x="24.4924%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 1.52%)</title><rect x="24.2424%" y="629" width="1.5152%" height="15" fill="rgb(230,99,41)"/><text x="24.4924%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.52%)</title><rect x="24.2424%" y="613" width="1.5152%" height="15" fill="rgb(253,106,12)"/><text x="24.4924%" y="623.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2 samples, 1.52%)</title><rect x="24.2424%" y="597" width="1.5152%" height="15" fill="rgb(213,46,41)"/><text x="24.4924%" y="607.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="581" width="1.5152%" height="15" fill="rgb(215,133,35)"/><text x="24.4924%" y="591.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="565" width="1.5152%" height="15" fill="rgb(213,28,5)"/><text x="24.4924%" y="575.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="549" width="1.5152%" height="15" fill="rgb(215,77,49)"/><text x="24.4924%" y="559.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="533" width="1.5152%" height="15" fill="rgb(248,100,22)"/><text x="24.4924%" y="543.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="517" width="1.5152%" height="15" fill="rgb(208,67,9)"/><text x="24.4924%" y="527.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="501" width="1.5152%" height="15" fill="rgb(219,133,21)"/><text x="24.4924%" y="511.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="485" width="1.5152%" height="15" fill="rgb(246,46,29)"/><text x="24.4924%" y="495.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="469" width="1.5152%" height="15" fill="rgb(246,185,52)"/><text x="24.4924%" y="479.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="453" width="1.5152%" height="15" fill="rgb(252,136,11)"/><text x="24.4924%" y="463.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="437" width="1.5152%" height="15" fill="rgb(219,138,53)"/><text x="24.4924%" y="447.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="421" width="1.5152%" height="15" fill="rgb(211,51,23)"/><text x="24.4924%" y="431.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="24.2424%" y="405" width="1.5152%" height="15" fill="rgb(247,221,28)"/><text x="24.4924%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="25.0000%" y="389" width="0.7576%" height="15" fill="rgb(251,222,45)"/><text x="25.2500%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.76%)</title><rect x="25.0000%" y="373" width="0.7576%" height="15" fill="rgb(217,162,53)"/><text x="25.2500%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (3 samples, 2.27%)</title><rect x="25.7576%" y="661" width="2.2727%" height="15" fill="rgb(229,93,14)"/><text x="26.0076%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.76%)</title><rect x="28.0303%" y="661" width="0.7576%" height="15" fill="rgb(209,67,49)"/><text x="28.2803%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="28.7879%" y="405" width="0.7576%" height="15" fill="rgb(213,87,29)"/><text x="29.0379%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.76%)</title><rect x="28.7879%" y="389" width="0.7576%" height="15" fill="rgb(205,151,52)"/><text x="29.0379%" y="399.50"></text></g><g><title>my_benchmark::main (2 samples, 1.52%)</title><rect x="28.7879%" y="661" width="1.5152%" height="15" fill="rgb(253,215,39)"/><text x="29.0379%" y="671.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (2 samples, 1.52%)</title><rect x="28.7879%" y="645" width="1.5152%" height="15" fill="rgb(221,220,41)"/><text x="29.0379%" y="655.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (2 samples, 1.52%)</title><rect x="28.7879%" y="629" width="1.5152%" height="15" fill="rgb(218,133,21)"/><text x="29.0379%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 1.52%)</title><rect x="28.7879%" y="613" width="1.5152%" height="15" fill="rgb(221,193,43)"/><text x="29.0379%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.52%)</title><rect x="28.7879%" y="597" width="1.5152%" height="15" fill="rgb(240,128,52)"/><text x="29.0379%" y="607.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2 samples, 1.52%)</title><rect x="28.7879%" y="581" width="1.5152%" height="15" fill="rgb(253,114,12)"/><text x="29.0379%" y="591.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="565" width="1.5152%" height="15" fill="rgb(215,223,47)"/><text x="29.0379%" y="575.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="549" width="1.5152%" height="15" fill="rgb(248,225,23)"/><text x="29.0379%" y="559.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="533" width="1.5152%" height="15" fill="rgb(250,108,0)"/><text x="29.0379%" y="543.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="517" width="1.5152%" height="15" fill="rgb(228,208,7)"/><text x="29.0379%" y="527.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="501" width="1.5152%" height="15" fill="rgb(244,45,10)"/><text x="29.0379%" y="511.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="485" width="1.5152%" height="15" fill="rgb(207,125,25)"/><text x="29.0379%" y="495.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="469" width="1.5152%" height="15" fill="rgb(210,195,18)"/><text x="29.0379%" y="479.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="453" width="1.5152%" height="15" fill="rgb(249,80,12)"/><text x="29.0379%" y="463.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="437" width="1.5152%" height="15" fill="rgb(221,65,9)"/><text x="29.0379%" y="447.50"></text></g><g><title>sudoku::solve_sudoku (2 samples, 1.52%)</title><rect x="28.7879%" y="421" width="1.5152%" height="15" fill="rgb(235,49,36)"/><text x="29.0379%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="29.5455%" y="405" width="0.7576%" height="15" fill="rgb(225,32,20)"/><text x="29.7955%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.76%)</title><rect x="29.5455%" y="389" width="0.7576%" height="15" fill="rgb(215,141,46)"/><text x="29.7955%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.76%)</title><rect x="29.5455%" y="373" width="0.7576%" height="15" fill="rgb(250,160,47)"/><text x="29.7955%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.76%)</title><rect x="29.5455%" y="357" width="0.7576%" height="15" fill="rgb(216,222,40)"/><text x="29.7955%" y="367.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.76%)</title><rect x="30.3030%" y="661" width="0.7576%" height="15" fill="rgb(234,217,39)"/><text x="30.5530%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.76%)</title><rect x="34.0909%" y="373" width="0.7576%" height="15" fill="rgb(207,178,40)"/><text x="34.3409%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.76%)</title><rect x="34.8485%" y="373" width="0.7576%" height="15" fill="rgb(221,136,13)"/><text x="35.0985%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.76%)</title><rect x="37.1212%" y="341" width="0.7576%" height="15" fill="rgb(249,199,10)"/><text x="37.3712%" y="351.50"></text></g><g><title>__GI___libc_malloc (4 samples, 3.03%)</title><rect x="35.6061%" y="357" width="3.0303%" height="15" fill="rgb(249,222,13)"/><text x="35.8561%" y="367.50">__G..</text></g><g><title>tcache_get (1 samples, 0.76%)</title><rect x="37.8788%" y="341" width="0.7576%" height="15" fill="rgb(244,185,38)"/><text x="38.1288%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 7.58%)</title><rect x="31.8182%" y="437" width="7.5758%" height="15" fill="rgb(236,202,9)"/><text x="32.0682%" y="447.50">&lt;core::ite..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (10 samples, 7.58%)</title><rect x="31.8182%" y="421" width="7.5758%" height="15" fill="rgb(250,229,37)"/><text x="32.0682%" y="431.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (10 samples, 7.58%)</title><rect x="31.8182%" y="405" width="7.5758%" height="15" fill="rgb(206,174,23)"/><text x="32.0682%" y="415.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (10 samples, 7.58%)</title><rect x="31.8182%" y="389" width="7.5758%" height="15" fill="rgb(211,33,43)"/><text x="32.0682%" y="399.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (5 samples, 3.79%)</title><rect x="35.6061%" y="373" width="3.7879%" height="15" fill="rgb(245,58,50)"/><text x="35.8561%" y="383.50">hash..</text></g><g><title>__rdl_alloc (1 samples, 0.76%)</title><rect x="38.6364%" y="357" width="0.7576%" height="15" fill="rgb(244,68,36)"/><text x="38.8864%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.76%)</title><rect x="38.6364%" y="341" width="0.7576%" height="15" fill="rgb(232,229,15)"/><text x="38.8864%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 1.52%)</title><rect x="45.4545%" y="357" width="1.5152%" height="15" fill="rgb(254,30,23)"/><text x="45.7045%" y="367.50"></text></g><g><title>tcache_get (1 samples, 0.76%)</title><rect x="46.2121%" y="341" width="0.7576%" height="15" fill="rgb(235,160,14)"/><text x="46.4621%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 9.09%)</title><rect x="39.3939%" y="437" width="9.0909%" height="15" fill="rgb(212,155,44)"/><text x="39.6439%" y="447.50">&lt;core::iter::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 9.09%)</title><rect x="39.3939%" y="421" width="9.0909%" height="15" fill="rgb(226,2,50)"/><text x="39.6439%" y="431.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (12 samples, 9.09%)</title><rect x="39.3939%" y="405" width="9.0909%" height="15" fill="rgb(234,177,6)"/><text x="39.6439%" y="415.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (12 samples, 9.09%)</title><rect x="39.3939%" y="389" width="9.0909%" height="15" fill="rgb(217,24,9)"/><text x="39.6439%" y="399.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (7 samples, 5.30%)</title><rect x="43.1818%" y="373" width="5.3030%" height="15" fill="rgb(220,13,46)"/><text x="43.4318%" y="383.50">hashbr..</text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 1.52%)</title><rect x="46.9697%" y="357" width="1.5152%" height="15" fill="rgb(239,221,27)"/><text x="47.2197%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 1.52%)</title><rect x="48.4848%" y="437" width="1.5152%" height="15" fill="rgb(222,198,25)"/><text x="48.7348%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 1.52%)</title><rect x="48.4848%" y="421" width="1.5152%" height="15" fill="rgb(211,99,13)"/><text x="48.7348%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 1.52%)</title><rect x="48.4848%" y="405" width="1.5152%" height="15" fill="rgb(232,111,31)"/><text x="48.7348%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (10 samples, 7.58%)</title><rect x="58.3333%" y="405" width="7.5758%" height="15" fill="rgb(245,82,37)"/><text x="58.5833%" y="415.50">hashbrown:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.76%)</title><rect x="68.1818%" y="389" width="0.7576%" height="15" fill="rgb(227,149,46)"/><text x="68.4318%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 15.91%)</title><rect x="55.3030%" y="421" width="15.9091%" height="15" fill="rgb(218,36,50)"/><text x="55.5530%" y="431.50">&lt;core::iter::adapters::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 5.30%)</title><rect x="65.9091%" y="405" width="5.3030%" height="15" fill="rgb(226,80,48)"/><text x="66.1591%" y="415.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (3 samples, 2.27%)</title><rect x="68.9394%" y="389" width="2.2727%" height="15" fill="rgb(238,224,15)"/><text x="69.1894%" y="399.50">h..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 7.58%)</title><rect x="71.2121%" y="421" width="7.5758%" height="15" fill="rgb(241,136,10)"/><text x="71.4621%" y="431.50">&lt;core::ite..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 6.82%)</title><rect x="71.9697%" y="405" width="6.8182%" height="15" fill="rgb(208,32,45)"/><text x="72.2197%" y="415.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (4 samples, 3.03%)</title><rect x="75.7576%" y="389" width="3.0303%" height="15" fill="rgb(207,135,9)"/><text x="76.0076%" y="399.50">has..</text></g><g><title>__GI___libc_free (1 samples, 0.76%)</title><rect x="78.7879%" y="421" width="0.7576%" height="15" fill="rgb(206,86,44)"/><text x="79.0379%" y="431.50"></text></g><g><title>[unknown] (82 samples, 62.12%)</title><rect x="21.2121%" y="677" width="62.1212%" height="15" fill="rgb(245,177,15)"/><text x="21.4621%" y="687.50">[unknown]</text></g><g><title>sudoku::solve_sudoku (69 samples, 52.27%)</title><rect x="31.0606%" y="661" width="52.2727%" height="15" fill="rgb(206,64,50)"/><text x="31.3106%" y="671.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="645" width="51.5152%" height="15" fill="rgb(234,36,40)"/><text x="32.0682%" y="655.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="629" width="51.5152%" height="15" fill="rgb(213,64,8)"/><text x="32.0682%" y="639.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="613" width="51.5152%" height="15" fill="rgb(210,75,36)"/><text x="32.0682%" y="623.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="597" width="51.5152%" height="15" fill="rgb(229,88,21)"/><text x="32.0682%" y="607.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="581" width="51.5152%" height="15" fill="rgb(252,204,47)"/><text x="32.0682%" y="591.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="565" width="51.5152%" height="15" fill="rgb(208,77,27)"/><text x="32.0682%" y="575.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="549" width="51.5152%" height="15" fill="rgb(221,76,26)"/><text x="32.0682%" y="559.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="533" width="51.5152%" height="15" fill="rgb(225,139,18)"/><text x="32.0682%" y="543.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="517" width="51.5152%" height="15" fill="rgb(230,137,11)"/><text x="32.0682%" y="527.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="501" width="51.5152%" height="15" fill="rgb(212,28,1)"/><text x="32.0682%" y="511.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="485" width="51.5152%" height="15" fill="rgb(248,164,17)"/><text x="32.0682%" y="495.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="469" width="51.5152%" height="15" fill="rgb(222,171,42)"/><text x="32.0682%" y="479.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (68 samples, 51.52%)</title><rect x="31.8182%" y="453" width="51.5152%" height="15" fill="rgb(243,84,45)"/><text x="32.0682%" y="463.50">sudoku::solve_sudoku</text></g><g><title>sudoku::solve_sudoku (44 samples, 33.33%)</title><rect x="50.0000%" y="437" width="33.3333%" height="15" fill="rgb(252,49,23)"/><text x="50.2500%" y="447.50">sudoku::solve_sudoku</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 3.79%)</title><rect x="79.5455%" y="421" width="3.7879%" height="15" fill="rgb(215,19,7)"/><text x="79.7955%" y="431.50">hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.76%)</title><rect x="82.5758%" y="405" width="0.7576%" height="15" fill="rgb(238,81,41)"/><text x="82.8258%" y="415.50"></text></g><g><title>__GI___clone (10 samples, 7.58%)</title><rect x="83.3333%" y="677" width="7.5758%" height="15" fill="rgb(210,199,37)"/><text x="83.5833%" y="687.50">__GI___clo..</text></g><g><title>[unknown] (10 samples, 7.58%)</title><rect x="83.3333%" y="661" width="7.5758%" height="15" fill="rgb(244,192,49)"/><text x="83.5833%" y="671.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.58%)</title><rect x="83.3333%" y="645" width="7.5758%" height="15" fill="rgb(226,211,11)"/><text x="83.5833%" y="655.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.58%)</title><rect x="83.3333%" y="629" width="7.5758%" height="15" fill="rgb(236,162,54)"/><text x="83.5833%" y="639.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.58%)</title><rect x="83.3333%" y="613" width="7.5758%" height="15" fill="rgb(220,229,9)"/><text x="83.5833%" y="623.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.82%)</title><rect x="84.0909%" y="597" width="6.8182%" height="15" fill="rgb(250,87,22)"/><text x="84.3409%" y="607.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.82%)</title><rect x="84.0909%" y="581" width="6.8182%" height="15" fill="rgb(239,43,17)"/><text x="84.3409%" y="591.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.82%)</title><rect x="84.0909%" y="565" width="6.8182%" height="15" fill="rgb(231,177,25)"/><text x="84.3409%" y="575.50">[unknown]</text></g><g><title>[unknown] (9 samples, 6.82%)</title><rect x="84.0909%" y="549" width="6.8182%" height="15" fill="rgb(219,179,1)"/><text x="84.3409%" y="559.50">[unknown]</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (1 samples, 0.76%)</title><rect x="90.9091%" y="325" width="0.7576%" height="15" fill="rgb(238,219,53)"/><text x="91.1591%" y="335.50"></text></g><g><title>&lt;std::sys::unix::fd::FileDesc as core::ops::drop::Drop&gt;::drop (1 samples, 0.76%)</title><rect x="90.9091%" y="309" width="0.7576%" height="15" fill="rgb(232,167,36)"/><text x="91.1591%" y="319.50"></text></g><g><title>__close (1 samples, 0.76%)</title><rect x="90.9091%" y="293" width="0.7576%" height="15" fill="rgb(244,19,51)"/><text x="91.1591%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="277" width="0.7576%" height="15" fill="rgb(224,6,22)"/><text x="91.1591%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="261" width="0.7576%" height="15" fill="rgb(224,145,5)"/><text x="91.1591%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="245" width="0.7576%" height="15" fill="rgb(234,130,49)"/><text x="91.1591%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="229" width="0.7576%" height="15" fill="rgb(254,6,2)"/><text x="91.1591%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="213" width="0.7576%" height="15" fill="rgb(208,96,46)"/><text x="91.1591%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="197" width="0.7576%" height="15" fill="rgb(239,3,39)"/><text x="91.1591%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="181" width="0.7576%" height="15" fill="rgb(233,210,1)"/><text x="91.1591%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="165" width="0.7576%" height="15" fill="rgb(244,137,37)"/><text x="91.1591%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="149" width="0.7576%" height="15" fill="rgb(240,136,2)"/><text x="91.1591%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="133" width="0.7576%" height="15" fill="rgb(239,18,37)"/><text x="91.1591%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="117" width="0.7576%" height="15" fill="rgb(218,185,22)"/><text x="91.1591%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="101" width="0.7576%" height="15" fill="rgb(225,218,4)"/><text x="91.1591%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="85" width="0.7576%" height="15" fill="rgb(230,182,32)"/><text x="91.1591%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="69" width="0.7576%" height="15" fill="rgb(242,56,43)"/><text x="91.1591%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="53" width="0.7576%" height="15" fill="rgb(233,99,24)"/><text x="91.1591%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="90.9091%" y="37" width="0.7576%" height="15" fill="rgb(234,209,42)"/><text x="91.1591%" y="47.50"></text></g><g><title>__libc_start_main (6 samples, 4.55%)</title><rect x="90.9091%" y="661" width="4.5455%" height="15" fill="rgb(227,7,12)"/><text x="91.1591%" y="671.50">__lib..</text></g><g><title>main (6 samples, 4.55%)</title><rect x="90.9091%" y="645" width="4.5455%" height="15" fill="rgb(245,203,43)"/><text x="91.1591%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (6 samples, 4.55%)</title><rect x="90.9091%" y="629" width="4.5455%" height="15" fill="rgb(238,205,33)"/><text x="91.1591%" y="639.50">std::..</text></g><g><title>std::panic::catch_unwind (6 samples, 4.55%)</title><rect x="90.9091%" y="613" width="4.5455%" height="15" fill="rgb(231,56,7)"/><text x="91.1591%" y="623.50">std::..</text></g><g><title>std::panicking::try (6 samples, 4.55%)</title><rect x="90.9091%" y="597" width="4.5455%" height="15" fill="rgb(244,186,29)"/><text x="91.1591%" y="607.50">std::..</text></g><g><title>std::panicking::try::do_call (6 samples, 4.55%)</title><rect x="90.9091%" y="581" width="4.5455%" height="15" fill="rgb(234,111,31)"/><text x="91.1591%" y="591.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 4.55%)</title><rect x="90.9091%" y="565" width="4.5455%" height="15" fill="rgb(241,149,10)"/><text x="91.1591%" y="575.50">core:..</text></g><g><title>std::rt::lang_start::_{{closure}} (6 samples, 4.55%)</title><rect x="90.9091%" y="549" width="4.5455%" height="15" fill="rgb(249,206,44)"/><text x="91.1591%" y="559.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 4.55%)</title><rect x="90.9091%" y="533" width="4.5455%" height="15" fill="rgb(251,153,30)"/><text x="91.1591%" y="543.50">std::..</text></g><g><title>my_benchmark::main (6 samples, 4.55%)</title><rect x="90.9091%" y="517" width="4.5455%" height="15" fill="rgb(239,152,38)"/><text x="91.1591%" y="527.50">my_be..</text></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (6 samples, 4.55%)</title><rect x="90.9091%" y="501" width="4.5455%" height="15" fill="rgb(249,139,47)"/><text x="91.1591%" y="511.50">&lt;crit..</text></g><g><title>std::sync::once::Once::call_inner (6 samples, 4.55%)</title><rect x="90.9091%" y="485" width="4.5455%" height="15" fill="rgb(244,64,35)"/><text x="91.1591%" y="495.50">std::..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 4.55%)</title><rect x="90.9091%" y="469" width="4.5455%" height="15" fill="rgb(216,46,15)"/><text x="91.1591%" y="479.50">std::..</text></g><g><title>std::sync::once::Once::call_inner (6 samples, 4.55%)</title><rect x="90.9091%" y="453" width="4.5455%" height="15" fill="rgb(250,74,19)"/><text x="91.1591%" y="463.50">std::..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 4.55%)</title><rect x="90.9091%" y="437" width="4.5455%" height="15" fill="rgb(249,42,33)"/><text x="91.1591%" y="447.50">std::..</text></g><g><title>criterion_plot::version (6 samples, 4.55%)</title><rect x="90.9091%" y="421" width="4.5455%" height="15" fill="rgb(242,149,17)"/><text x="91.1591%" y="431.50">crite..</text></g><g><title>std::process::Command::output (6 samples, 4.55%)</title><rect x="90.9091%" y="405" width="4.5455%" height="15" fill="rgb(244,29,21)"/><text x="91.1591%" y="415.50">std::..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 4.55%)</title><rect x="90.9091%" y="389" width="4.5455%" height="15" fill="rgb(220,130,37)"/><text x="91.1591%" y="399.50">core:..</text></g><g><title>std::process::Command::output::{{closure}} (6 samples, 4.55%)</title><rect x="90.9091%" y="373" width="4.5455%" height="15" fill="rgb(211,67,2)"/><text x="91.1591%" y="383.50">std::..</text></g><g><title>std::process::Child::wait_with_output (6 samples, 4.55%)</title><rect x="90.9091%" y="357" width="4.5455%" height="15" fill="rgb(235,68,52)"/><text x="91.1591%" y="367.50">std::..</text></g><g><title>std::sys::unix::pipe::read2 (6 samples, 4.55%)</title><rect x="90.9091%" y="341" width="4.5455%" height="15" fill="rgb(246,142,3)"/><text x="91.1591%" y="351.50">std::..</text></g><g><title>std::sys::unix::cvt_r (5 samples, 3.79%)</title><rect x="91.6667%" y="325" width="3.7879%" height="15" fill="rgb(241,25,7)"/><text x="91.9167%" y="335.50">std:..</text></g><g><title>std::sys::unix::pipe::read2::{{closure}} (5 samples, 3.79%)</title><rect x="91.6667%" y="309" width="3.7879%" height="15" fill="rgb(242,119,39)"/><text x="91.9167%" y="319.50">std:..</text></g><g><title>__GI___poll (5 samples, 3.79%)</title><rect x="91.6667%" y="293" width="3.7879%" height="15" fill="rgb(241,98,45)"/><text x="91.9167%" y="303.50">__GI..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="91.6667%" y="277" width="3.7879%" height="15" fill="rgb(254,28,30)"/><text x="91.9167%" y="287.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="91.6667%" y="261" width="3.7879%" height="15" fill="rgb(241,142,54)"/><text x="91.9167%" y="271.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="91.6667%" y="245" width="3.7879%" height="15" fill="rgb(222,85,15)"/><text x="91.9167%" y="255.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="91.6667%" y="229" width="3.7879%" height="15" fill="rgb(210,85,47)"/><text x="91.9167%" y="239.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="91.6667%" y="213" width="3.7879%" height="15" fill="rgb(224,206,25)"/><text x="91.9167%" y="223.50">[unk..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="197" width="3.0303%" height="15" fill="rgb(243,201,19)"/><text x="92.6742%" y="207.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="181" width="3.0303%" height="15" fill="rgb(236,59,4)"/><text x="92.6742%" y="191.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="165" width="3.0303%" height="15" fill="rgb(254,179,45)"/><text x="92.6742%" y="175.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="149" width="3.0303%" height="15" fill="rgb(226,14,10)"/><text x="92.6742%" y="159.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="133" width="3.0303%" height="15" fill="rgb(244,27,41)"/><text x="92.6742%" y="143.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="117" width="3.0303%" height="15" fill="rgb(235,35,32)"/><text x="92.6742%" y="127.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="101" width="3.0303%" height="15" fill="rgb(218,68,31)"/><text x="92.6742%" y="111.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="85" width="3.0303%" height="15" fill="rgb(207,120,37)"/><text x="92.6742%" y="95.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="69" width="3.0303%" height="15" fill="rgb(227,98,0)"/><text x="92.6742%" y="79.50">[un..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="92.4242%" y="53" width="3.0303%" height="15" fill="rgb(207,7,3)"/><text x="92.6742%" y="63.50">[un..</text></g><g><title>my_benchmark-6b (104 samples, 78.79%)</title><rect x="17.4242%" y="693" width="78.7879%" height="15" fill="rgb(206,98,19)"/><text x="17.6742%" y="703.50">my_benchmark-6b</text></g><g><title>_start (7 samples, 5.30%)</title><rect x="90.9091%" y="677" width="5.3030%" height="15" fill="rgb(217,5,26)"/><text x="91.1591%" y="687.50">_start</text></g><g><title>_dl_start (1 samples, 0.76%)</title><rect x="95.4545%" y="661" width="0.7576%" height="15" fill="rgb(235,190,38)"/><text x="95.7045%" y="671.50"></text></g><g><title>_dl_start_final (1 samples, 0.76%)</title><rect x="95.4545%" y="645" width="0.7576%" height="15" fill="rgb(247,86,24)"/><text x="95.7045%" y="655.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.76%)</title><rect x="95.4545%" y="629" width="0.7576%" height="15" fill="rgb(205,101,16)"/><text x="95.7045%" y="639.50"></text></g><g><title>dl_main (1 samples, 0.76%)</title><rect x="95.4545%" y="613" width="0.7576%" height="15" fill="rgb(246,168,33)"/><text x="95.7045%" y="623.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.76%)</title><rect x="95.4545%" y="597" width="0.7576%" height="15" fill="rgb(231,114,1)"/><text x="95.7045%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.76%)</title><rect x="95.4545%" y="581" width="0.7576%" height="15" fill="rgb(207,184,53)"/><text x="95.7045%" y="591.50"></text></g><g><title>openaux (1 samples, 0.76%)</title><rect x="95.4545%" y="565" width="0.7576%" height="15" fill="rgb(224,95,51)"/><text x="95.7045%" y="575.50"></text></g><g><title>_dl_map_object (1 samples, 0.76%)</title><rect x="95.4545%" y="549" width="0.7576%" height="15" fill="rgb(212,188,45)"/><text x="95.7045%" y="559.50"></text></g><g><title>open_path (1 samples, 0.76%)</title><rect x="95.4545%" y="533" width="0.7576%" height="15" fill="rgb(223,154,38)"/><text x="95.7045%" y="543.50"></text></g><g><title>open_verify (1 samples, 0.76%)</title><rect x="95.4545%" y="517" width="0.7576%" height="15" fill="rgb(251,22,52)"/><text x="95.7045%" y="527.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.76%)</title><rect x="95.4545%" y="501" width="0.7576%" height="15" fill="rgb(229,209,22)"/><text x="95.7045%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="485" width="0.7576%" height="15" fill="rgb(234,138,34)"/><text x="95.7045%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="469" width="0.7576%" height="15" fill="rgb(212,95,11)"/><text x="95.7045%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="453" width="0.7576%" height="15" fill="rgb(240,179,47)"/><text x="95.7045%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="437" width="0.7576%" height="15" fill="rgb(240,163,11)"/><text x="95.7045%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="421" width="0.7576%" height="15" fill="rgb(236,37,12)"/><text x="95.7045%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="405" width="0.7576%" height="15" fill="rgb(232,164,16)"/><text x="95.7045%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="95.4545%" y="389" width="0.7576%" height="15" fill="rgb(244,205,15)"/><text x="95.7045%" y="399.50"></text></g><g><title>all (132 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(223,117,47)"/><text x="0.2500%" y="719.50"></text></g><g><title>perf (5 samples, 3.79%)</title><rect x="96.2121%" y="693" width="3.7879%" height="15" fill="rgb(244,107,35)"/><text x="96.4621%" y="703.50">perf</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="677" width="3.7879%" height="15" fill="rgb(205,140,8)"/><text x="96.4621%" y="687.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="661" width="3.7879%" height="15" fill="rgb(228,84,46)"/><text x="96.4621%" y="671.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="645" width="3.7879%" height="15" fill="rgb(254,188,9)"/><text x="96.4621%" y="655.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="629" width="3.7879%" height="15" fill="rgb(206,112,54)"/><text x="96.4621%" y="639.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="613" width="3.7879%" height="15" fill="rgb(216,84,49)"/><text x="96.4621%" y="623.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="597" width="3.7879%" height="15" fill="rgb(214,194,35)"/><text x="96.4621%" y="607.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="581" width="3.7879%" height="15" fill="rgb(249,28,3)"/><text x="96.4621%" y="591.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="565" width="3.7879%" height="15" fill="rgb(222,56,52)"/><text x="96.4621%" y="575.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="549" width="3.7879%" height="15" fill="rgb(245,217,50)"/><text x="96.4621%" y="559.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="533" width="3.7879%" height="15" fill="rgb(213,201,24)"/><text x="96.4621%" y="543.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="517" width="3.7879%" height="15" fill="rgb(248,116,28)"/><text x="96.4621%" y="527.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="501" width="3.7879%" height="15" fill="rgb(219,72,43)"/><text x="96.4621%" y="511.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="96.2121%" y="485" width="3.7879%" height="15" fill="rgb(209,138,14)"/><text x="96.4621%" y="495.50">[unk..</text></g></svg></svg>